{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"D:\\\\React + next JS\\\\pages\\\\index.js\";\nimport React from \"react\";\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../Components/Layout';\n\nvar Index = function Index(props) {\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Welome to React Next JS\"), props.children));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var _this = this;\n\n  var res;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n          };\n          _context.next = 3;\n          return fetch('http://localhost:50607/api/item') // const data = await res.json();\n          // console.log(data);\n          .then(function (res) {\n            return res.json();\n          }).then(function (result) {\n            _this.setState({\n              isLoaded: true,\n              items: result.items\n            });\n          }, // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          function (error) {\n            _this.setState({\n              isLoaded: true,\n              error: error\n            });\n          });\n\n        case 3:\n          res = _context.sent;\n          return _context.abrupt(\"return\", {\n            render: function render() {\n              var _this$state = this.state,\n                  error = _this$state.error,\n                  isLoaded = _this$state.isLoaded,\n                  items = _this$state.items;\n\n              if (error) {\n                return React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 53\n                  },\n                  __self: this\n                }, \"Error: \", error.message);\n              } else if (!isLoaded) {\n                return React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 55\n                  },\n                  __self: this\n                }, \"Loading...\");\n              } else {\n                return React.createElement(\"ul\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 58\n                  },\n                  __self: this\n                }, items.map(function (item) {\n                  return React.createElement(\"li\", {\n                    key: item.name,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 60\n                    },\n                    __self: this\n                  }, item.name);\n                }));\n              }\n            }\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this);\n}));\nexport default Index;","map":{"version":3,"sources":["D:\\React + next JS\\pages\\index.js"],"names":["fetch","Layout","Index","props","children","getInitialProps","state","error","isLoaded","items","then","res","json","result","setState","render","message","map","item","name"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAKA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD;AAAA,SAEV,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADD,EAEEA,KAAK,CAACC,QAFR,CADJ,CAFU;AAAA,CAAd;;AAWAF,KAAK,CAACG,eAAN;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGpB,eAAKC,KAAL,GAAa;AACXC,YAAAA,KAAK,EAAE,IADI;AAEXC,YAAAA,QAAQ,EAAE,KAFC;AAGXC,YAAAA,KAAK,EAAE;AAHI,WAAb;AAHoB;AAAA,iBAQFT,KAAK,CAAC,iCAAD,CAAL,CAClB;AACA;AAFkB,WAGjBU,IAHiB,CAGZ,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,WAHS,EAIjBF,IAJiB,CAKhB,UAACG,MAAD,EAAY;AACV,YAAA,KAAI,CAACC,QAAL,CAAc;AACZN,cAAAA,QAAQ,EAAE,IADE;AAEZC,cAAAA,KAAK,EAAEI,MAAM,CAACJ;AAFF,aAAd;AAID,WAVe,EAWhB;AACA;AACA;AACA,oBAACF,KAAD,EAAW;AACT,YAAA,KAAI,CAACO,QAAL,CAAc;AACZN,cAAAA,QAAQ,EAAE,IADE;AAEZD,cAAAA,KAAK,EAALA;AAFY,aAAd;AAID,WAnBe,CARE;;AAAA;AAQdI,UAAAA,GARc;AAAA,2CA8Bd;AACFI,YAAAA,MADE,oBACO;AAAA,gCAC8B,KAAKT,KADnC;AAAA,kBACGC,KADH,eACGA,KADH;AAAA,kBACUC,QADV,eACUA,QADV;AAAA,kBACoBC,KADpB,eACoBA,KADpB;;AAEL,kBAAIF,KAAJ,EAAW;AACT,uBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAaA,KAAK,CAACS,OAAnB,CAAP;AACD,eAFD,MAEO,IAAI,CAACR,QAAL,EAAe;AACpB,uBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACD,eAFM,MAEA;AACL,uBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGC,KAAK,CAACQ,GAAN,CAAU,UAAAC,IAAI;AAAA,yBACb;AAAI,oBAAA,GAAG,EAAEA,IAAI,CAACC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACGD,IAAI,CAACC,IADR,CADa;AAAA,iBAAd,CADH,CADF;AASD;AACF;AAlBD,WA9Bc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAyDA,eAAejB,KAAf","sourcesContent":["\r\nimport fetch from 'isomorphic-unfetch';\r\nimport Layout from '../Components/Layout';\r\n\r\n\r\n    \r\n  \r\nconst Index = (props) =>(\r\n    \r\n    <Layout>\r\n        <div>\r\n         <h1>Welome to React Next JS</h1>\r\n         {props.children}\r\n\r\n        </div>\r\n    </Layout>\r\n);\r\n\r\nIndex.getInitialProps = async function()\r\n{\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n    const res = await fetch('http://localhost:50607/api/item')\r\n    // const data = await res.json();\r\n    // console.log(data);\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          items: result.items\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n\r\n    return{\r\n        render() {\r\n            const { error, isLoaded, items } = this.state;\r\n            if (error) {\r\n              return <div>Error: {error.message}</div>;\r\n            } else if (!isLoaded) {\r\n              return <div>Loading...</div>;\r\n            } else {\r\n              return (\r\n                <ul>\r\n                  {items.map(item => (\r\n                    <li key={item.name}>\r\n                      {item.name} \r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              );\r\n            }\r\n          }\r\n        }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}